generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for storing user information
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  username      String    @unique
  password      String    // Hashed password
  firstName     String?
  lastName      String?
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  roles         UserRole[]
  sessions      Session[]
  refreshTokens RefreshToken[]

  @@map("users")
}

// Role model for defining user roles
model Role {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  users       UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

// Permission model for granular access control
model Permission {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  roles       RolePermission[]

  @@map("permissions")
}

// Junction table for user-role relationship (many-to-many)
model UserRole {
  userId    String
  roleId    String
  assignedAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

// Junction table for role-permission relationship (many-to-many)
model RolePermission {
  roleId       String
  permissionId String
  assignedAt   DateTime @default(now())

  // Relations
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

// Session model for managing user sessions
model Session {
  id           String   @id @default(uuid())
  userId       String
  deviceInfo   String?
  ipAddress    String?
  lastActivity DateTime @default(now())
  isValid      Boolean  @default(true)
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// RefreshToken model for handling JWT refresh tokens
model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  revokedAt DateTime?

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}
