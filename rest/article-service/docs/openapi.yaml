openapi: 3.0.0
info:
  title: KnowledgeChain Article Service API
  version: 1.0.0
  description: API documentation for the Article microservice of the KnowledgeChain platform. This service is served through an nginx proxy along with other microservices.

servers:
  - url: http://localhost:5000
    description: Local development server (via nginx proxy)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Article:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        slug:
          type: string
        content:
          type: string
        summary:
          type: string
          nullable: true
        authorId:
          type: string
        status:
          type: string
          enum: [DRAFT, PENDING_REVIEW, PUBLISHED, ARCHIVED]
        published:
          type: boolean
        publishedAt:
          type: string
          format: date-time
          nullable: true
        views:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        video:
          $ref: '#/components/schemas/Video'
          nullable: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/ArticleTag'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/ArticleCategory'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    Video:
      type: object
      properties:
        id:
          type: string
          format: uuid
        articleId:
          type: string
          format: uuid
        url:
          type: string
        duration:
          type: integer
        thumbnail:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        captions:
          type: array
          items:
            $ref: '#/components/schemas/Caption'

    Caption:
      type: object
      properties:
        id:
          type: string
          format: uuid
        videoId:
          type: string
          format: uuid
        language:
          type: string
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Tag:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
        parentId:
          type: string
          format: uuid
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        articleId:
          type: string
          format: uuid
        authorId:
          type: string
        content:
          type: string
        parentId:
          type: string
          format: uuid
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        replies:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    ArticleTag:
      type: object
      properties:
        articleId:
          type: string
          format: uuid
        tagId:
          type: string
          format: uuid
        assignedAt:
          type: string
          format: date-time

    ArticleCategory:
      type: object
      properties:
        articleId:
          type: string
          format: uuid
        categoryId:
          type: string
          format: uuid
        assignedAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        message:
          type: string

paths:
  /api/articles:
    post:
      summary: Create a new article
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        '201':
          description: Article created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get all articles with filters
      parameters:
        - name: skip
          in: query
          schema:
            type: integer
        - name: take
          in: query
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
            enum: [DRAFT, PENDING_REVIEW, PUBLISHED, ARCHIVED]
        - name: authorId
          in: query
          schema:
            type: string
        - name: categoryId
          in: query
          schema:
            type: string
        - name: tagId
          in: query
          schema:
            type: string
        - name: orderBy
          in: query
          schema:
            type: object
      responses:
        '200':
          description: List of articles
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                  total:
                    type: integer
                  skip:
                    type: integer
                  take:
                    type: integer

  /api/articles/{id}:
    get:
      summary: Get article by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Article found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '404':
          description: Article not found

    put:
      summary: Update article
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        '200':
          description: Article updated
        '403':
          description: Not authorized
        '404':
          description: Article not found

    delete:
      summary: Delete article
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Article deleted
        '403':
          description: Not authorized
        '404':
          description: Article not found

  /api/articles/by-slug/{slug}:
    get:
      summary: Get article by slug
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Article found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '404':
          description: Article not found

  /api/articles/{id}/status:
    patch:
      summary: Update article status
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [DRAFT, PENDING_REVIEW, PUBLISHED, ARCHIVED]
      responses:
        '200':
          description: Status updated
        '403':
          description: Not authorized
        '404':
          description: Article not found

  /api/articles/videos:
    post:
      summary: Create video for article
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Video'
      responses:
        '201':
          description: Video created
        '403':
          description: Not authorized
        '404':
          description: Article not found

  /api/articles/videos/{id}:
    get:
      summary: Get video by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Video found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
        '404':
          description: Video not found

    put:
      summary: Update video
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Video'
      responses:
        '200':
          description: Video updated
        '403':
          description: Not authorized
        '404':
          description: Video not found

    delete:
      summary: Delete video
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Video deleted
        '403':
          description: Not authorized
        '404':
          description: Video not found

  /api/articles/captions:
    post:
      summary: Create caption for video
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Caption'
      responses:
        '201':
          description: Caption created
        '403':
          description: Not authorized
        '404':
          description: Video not found

  /api/articles/captions/{id}:
    get:
      summary: Get caption by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Caption found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Caption'
        '404':
          description: Caption not found

    put:
      summary: Update caption
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Caption'
      responses:
        '200':
          description: Caption updated
        '403':
          description: Not authorized
        '404':
          description: Caption not found

    delete:
      summary: Delete caption
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Caption deleted
        '403':
          description: Not authorized
        '404':
          description: Caption not found

  /api/articles/tags:
    post:
      summary: Create new tag
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '201':
          description: Tag created
        '500':
          description: Server error

    get:
      summary: Get all tags
      parameters:
        - name: skip
          in: query
          schema:
            type: integer
        - name: take
          in: query
          schema:
            type: integer
        - name: orderBy
          in: query
          schema:
            type: object
      responses:
        '200':
          description: List of tags
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
                  total:
                    type: integer
                  skip:
                    type: integer
                  take:
                    type: integer

  /api/articles/comments:
    post:
      summary: Create comment for article
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment created
        '404':
          description: Article not found

  /api/articles/comments/{id}:
    get:
      summary: Get comment by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Comment found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Comment not found

    put:
      summary: Update comment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comment updated
        '403':
          description: Not authorized
        '404':
          description: Comment not found

    delete:
      summary: Delete comment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Comment deleted
        '403':
          description: Not authorized
        '404':
          description: Comment not found

  /api/articles/comments/{id}/replies:
    get:
      summary: Get comment replies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: skip
          in: query
          schema:
            type: integer
        - name: take
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: List of replies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '404':
          description: Comment not found

    post:
      summary: Create reply to comment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Reply created
        '404':
          description: Parent comment not found 