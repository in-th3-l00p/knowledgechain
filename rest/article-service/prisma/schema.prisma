generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  content     String   
  summary     String?  @db.Text
  authorId    String   
  status      ArticleStatus @default(DRAFT)
  published   Boolean  @default(false)
  publishedAt DateTime?
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  video       Video?
  tags        ArticleTag[]
  categories  ArticleCategory[]
  comments    Comment[]

  @@map("articles")
}

model Video {
  id          String   @id @default(uuid())
  articleId   String   @unique
  url         String   
  duration    Int      
  thumbnail   String?  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  captions    Caption[]

  @@map("videos")
}

model Caption {
  id          String   @id @default(uuid())
  videoId     String
  language    String   
  content     String   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  video       Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("captions")
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  articles    ArticleTag[]

  @@map("tags")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  articles    ArticleCategory[]

  @@map("categories")
}

model ArticleTag {
  articleId   String
  tagId       String
  assignedAt  DateTime @default(now())

  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag         Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@map("article_tags")
}

model ArticleCategory {
  articleId   String
  categoryId  String
  assignedAt  DateTime @default(now())

  article     Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([articleId, categoryId])
  @@map("article_categories")
}

model Comment {
  id          String   @id @default(uuid())
  articleId   String
  authorId    String   
  content     String
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  article     Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")

  @@map("comments")
}

enum ArticleStatus {
  DRAFT
  PENDING_REVIEW
  PUBLISHED
  ARCHIVED
}
