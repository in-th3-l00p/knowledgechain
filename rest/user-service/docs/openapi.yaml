openapi: 3.0.0
info:
  title: User Service API
  description: API for managing users and their associated wallets in a Web3 application
  version: 1.0.0

servers:
  - url: http://localhost:3000/api
    description: Local development server

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        isActive:
          type: boolean
        emailVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    Wallet:
      type: object
      properties:
        id:
          type: string
          format: uuid
        address:
          type: string
          pattern: '^0x[a-fA-F0-9]{40}$'
        userId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string

paths:
  /users:
    get:
      summary: Get all users
      parameters:
        - name: skip
          in: query
          schema:
            type: integer
            minimum: 0
        - name: take
          in: query
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: List of users with pagination metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      skip:
                        type: integer
                      take:
                        type: integer
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - username
                - password
                - firstName
                - lastName
              properties:
                email:
                  type: string
                  format: email
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                password:
                  type: string
                  minLength: 6
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get user by ID
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                password:
                  type: string
                  minLength: 6
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete user
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/wallets:
    post:
      summary: Create a new wallet for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - address
                - userId
              properties:
                address:
                  type: string
                  pattern: '^0x[a-fA-F0-9]{40}$'
                userId:
                  type: string
                  format: uuid
      responses:
        '201':
          description: Wallet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/wallets/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get wallet by ID
      responses:
        '200':
          description: Wallet found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '404':
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                  pattern: '^0x[a-fA-F0-9]{40}$'
      responses:
        '200':
          description: Wallet updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '404':
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete wallet
      responses:
        '204':
          description: Wallet deleted successfully
        '404':
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/wallets/user/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get wallet by user ID
      responses:
        '200':
          description: Wallet found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '404':
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/wallets/address/{address}:
    parameters:
      - name: address
        in: path
        required: true
        schema:
          type: string
          pattern: '^0x[a-fA-F0-9]{40}$'
    
    get:
      summary: Get wallet by address
      responses:
        '200':
          description: Wallet found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '404':
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 